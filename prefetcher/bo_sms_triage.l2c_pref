#include <stdint.h>
#include "bo_percore.h" 
#include "sms.h" 
#include "cache.h"
#include "tableisb.h"

#define TABLEISB_FILL_LEVEL FILL_L2
//#define TABLEISB_FILL_LEVEL FILL_LLC
#define MAX_ALLOWED_DEGREE 8

#define DEGREE 1

TableISBConfig conf[NUM_CPUS];
TableISB data[NUM_CPUS];
uint64_t last_address[NUM_CPUS];

void CACHE::l2c_prefetcher_initialize() {
    cpu = 0;
	bo_l2c_prefetcher_initialize();
    sms_l2c_prefetcher_initialize(); 
    conf[cpu].lookahead = 1;
    conf[cpu].degree = 1;
//    conf[cpu].on_chip_size = 4096;
//    conf[cpu].on_chip_size = 8192;
//    conf[cpu].on_chip_size = 16384;  //64K
//    conf[cpu].on_chip_size = 32768;  //128KB
//    conf[cpu].on_chip_size = 65536;  //256KB
//    conf[cpu].on_chip_size = 131072; //512KB
    conf[cpu].on_chip_size = 262144; //1MB
//    conf[cpu].on_chip_size = 524288;  //2MB
    conf[cpu].on_chip_assoc = 8;
//    conf[cpu].on_chip_assoc = 524288;
    conf[cpu].training_unit_size = 10000000;
//    conf[cpu].repl = TABLEISB_REPL_LRU;
    conf[cpu].repl = TABLEISB_REPL_HAWKEYE;
//    conf[cpu].repl = TABLEISB_REPL_PERFECT;
    conf[cpu].use_dynamic_assoc = true;
//    conf[cpu].use_dynamic_assoc = false;

    data[cpu].set_conf(&conf[cpu]);
}

uint64_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t pc, uint8_t cache_hit, uint8_t type, uint64_t metadata_in)
{

    uint64_t bo_trigger_addr = 0;
    uint64_t bo_target_offset = 0;
    uint64_t bo_target_addr = 0;
    bo_l2c_prefetcher_operate(addr, pc, cache_hit, type, this, &bo_trigger_addr, &bo_target_offset, 0);

    if (bo_trigger_addr && bo_target_offset) {

        for(unsigned int i=1; i<=DEGREE; i++) {
            bo_target_addr = bo_trigger_addr + (i*bo_target_offset); 
            bo_issue_prefetcher(this, pc, bo_trigger_addr, bo_target_addr, FILL_L2);
        }
    }
    sms_l2c_prefetcher_operate(addr, pc, cache_hit, type, this);
    cpu = 0;
    if (type != LOAD) {
        return metadata_in;
    }

    //if (cache_hit) {
    //    return metadata_in;
    //}

    addr = (addr >> 6) << 6;
    if(addr == last_address[cpu])
        return metadata_in;
    last_address[cpu] = addr;

    int i;
    uint64_t prefetch_addr_list[MAX_ALLOWED_DEGREE];
    for (i = 0; i < MAX_ALLOWED_DEGREE; ++i) {
        prefetch_addr_list[i] = 0;
    }
    data[cpu].calculatePrefetch(pc, addr, cache_hit, prefetch_addr_list,
            MAX_ALLOWED_DEGREE);

    int prefetched = 0;
    for (i = 0; i < MAX_ALLOWED_DEGREE; ++i) {
        if (prefetch_addr_list[i] == 0) {
            break;
        }
        int ret = prefetch_line(pc, addr, prefetch_addr_list[i], TABLEISB_FILL_LEVEL, addr);
        if(ret)
        {
 //           cout << hex << addr << " " << prefetch_addr_list[i] << dec << endl;
            prefetched++;
            if(prefetched >= conf[cpu].degree)
                break;
        }
    }

    // Set cache assoc if dynamic
    //cout << "LLC WAY: " << LLC_WAY << ", ASSOC: " << data[cpu].get_assoc() << endl;
    unsigned total_assoc = 0;
    for (unsigned mycpu = 0; mycpu < NUM_CPUS; ++mycpu) {
        total_assoc += data[mycpu].get_assoc();
    }
    total_assoc /= NUM_CPUS;
    assert (total_assoc < LLC_WAY);
    if (conf[cpu].repl != TABLEISB_REPL_PERFECT)
        static_cast<CACHE*>(lower_level)->current_assoc = LLC_WAY - total_assoc;

    //cout << total_assoc << " " << current_assoc << " " << data[cpu].get_assoc() << endl;
    return metadata_in;
}

uint64_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint64_t metadata_in)
{
	bo_l2c_prefetcher_cache_fill(addr, set, way, prefetch, evicted_addr, this, 0);
    sms_l2c_prefetcher_cache_fill(addr, set, way, prefetch, evicted_addr, this);
    if(prefetch) {
        uint64_t next_addr;
        bool next_addr_exists = data[0].on_chip_data.get_next_addr(metadata_in, next_addr, 0, true);
    }
    return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats() {
    cpu = 0;
	bo_l2c_prefetcher_final_stats();
    sms_l2c_prefetcher_final_stats();
    data[cpu].print_stats();
}

