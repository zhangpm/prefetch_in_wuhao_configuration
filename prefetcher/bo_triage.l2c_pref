#include <stdint.h>
#include "bo_percore.h" 
#include "cache.h"
#include "triage.h"
#include "rap.h"
#include "log.h"
#include <map>

#define TRIAGE_FILL_LEVEL FILL_L2
#define MAX_ALLOWED_DEGREE 8
#define RAH_SHARED_CACHE

#define BO_DEGREE 8

#define PF_CROSS_PAGE false

TriageConfig conf[NUM_CPUS];
Triage data[NUM_CPUS];
RAH rah(2048);
uint64_t last_address[NUM_CPUS];

std::set<uint64_t>unique_addr;
std::map<uint64_t, uint64_t> total_usage_count;
std::map<uint64_t, uint64_t> actual_usage_count;

ChampSimLog cslog("bo_triage_queue_size.txt");

void CACHE::l2c_prefetcher_initialize() {
	bo_l2c_prefetcher_initialize();
    cout << NUM_CPUS << endl;
    conf[cpu].lookahead = 1;
    conf[cpu].degree = 1;
    conf[cpu].on_chip_assoc = 8;
    conf[cpu].training_unit_size = 10000000;
//    conf[cpu].repl = TRIAGE_REPL_LRU;
    conf[cpu].repl = TRIAGE_REPL_HAWKEYE;
//    conf[cpu].repl = TRIAGE_REPL_PERFECT;
//    conf[cpu].use_dynamic_assoc = true;
    conf[cpu].use_dynamic_assoc = false;
    int assoc_config = ASSOC_CONFIG;
    int assoc = (assoc_config>>cpu) & 1;
//    conf[cpu].on_chip_assoc = assoc?8:0;
    conf[cpu].on_chip_assoc = 8;
    conf[cpu].on_chip_set = 32768;
    std::cout << "ASSOC_CONFIG: " << ASSOC_CONFIG << std::endl;
    std::cout << "CPU " << cpu << " assoc: " << conf[cpu].on_chip_assoc << std::endl;

    data[cpu].set_conf(&conf[cpu]);
}

uint64_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t pc, uint8_t cache_hit, uint8_t type, uint64_t metadata_in)
{

    uint64_t bo_trigger_addr = 0;
    uint64_t bo_target_offset = 0;
    uint64_t bo_target_addr = 0;
    bo_l2c_prefetcher_operate(addr, pc, cache_hit, type, this, &bo_trigger_addr, &bo_target_offset, cpu);

    if (bo_trigger_addr && bo_target_offset) {

        for(unsigned int i=1; i<=BO_DEGREE; i++) {
            bo_target_addr = bo_trigger_addr + (i*bo_target_offset); 
            bo_issue_prefetcher(this, pc, bo_trigger_addr, bo_target_addr, TRIAGE_FILL_LEVEL, PF_CROSS_PAGE);
        }
    }
    if (type != LOAD) {
        return metadata_in;
    }

    //if (cache_hit) {
    //    return metadata_in;
    //}

    addr = (addr >> 6) << 6;
#ifdef RAH_SHARED_CACHE
    rah.add_access(addr, pc, 0, false);
#else
    rah.add_access(addr, pc, cpu, false);
#endif
    if(addr == last_address[cpu])
        return metadata_in;
    last_address[cpu] = addr;
    unique_addr.insert(addr);

    int i;
    uint64_t prefetch_addr_list[MAX_ALLOWED_DEGREE];
    for (i = 0; i < MAX_ALLOWED_DEGREE; ++i) {
        prefetch_addr_list[i] = 0;
    }
    data[cpu].calculatePrefetch(pc, addr, cache_hit, prefetch_addr_list,
            MAX_ALLOWED_DEGREE, cpu);

    int prefetched = 0;
    for (i = 0; i < MAX_ALLOWED_DEGREE; ++i) {
        if (prefetch_addr_list[i] == 0) {
            break;
        }
#ifdef RAH_SHARED_CACHE
        rah.add_access(prefetch_addr_list[i], pc, 0, true);
#else
        rah.add_access(prefetch_addr_list[i], pc, cpu, true);
#endif
        PACKET test_packet;
        test_packet.address = prefetch_addr_list[i] >> LOG2_BLOCK_SIZE;
        test_packet.full_addr = prefetch_addr_list[i];
        bool llc_hit = static_cast<CACHE*>(lower_level)->check_hit(&test_packet) != -1;
        bool l2_hit = check_hit(&test_packet) != -1;
        //cout << "addr: " << addr << ", cache_hit: " << int(cache_hit) << ", llc_hit: " << llc_hit << endl;
        uint64_t md_in = addr;
        if(llc_hit)
            md_in = 0;
        ++total_usage_count[addr];
        if (!l2_hit && !llc_hit){
           ++actual_usage_count[addr]; 
        }
#if 1
        int ret = prefetch_line(pc, addr, prefetch_addr_list[i], TRIAGE_FILL_LEVEL, md_in);
        cslog.makeLog("PQ free size:" + to_string(PQ.SIZE - PQ.occupancy), true);
	cslog.makeLog("MSHR free size:" + to_string(MSHR.SIZE - MSHR.occupancy), true);
	if(ret)
        {
		cslog.makeLog("triage pretech successed!\n", true);
 //           cout << hex << addr << " " << prefetch_addr_list[i] << dec << endl;
            prefetched++;
            if(prefetched >= conf[cpu].degree)
                break;
        } else {
		cslog.makeLog("triage pretech failed!\n", true);
	}
#endif
    }

    // Set cache assoc if dynamic
    //cout << "LLC WAY: " << LLC_WAY << ", ASSOC: " << data[cpu].get_assoc() << endl;
    unsigned total_assoc = 0;
    for (unsigned mycpu = 0; mycpu < NUM_CPUS; ++mycpu) {
        total_assoc += data[mycpu].get_assoc();
    }
    total_assoc /= NUM_CPUS;
    assert (total_assoc < LLC_WAY);
    if (conf[cpu].repl != TRIAGE_REPL_PERFECT)
        static_cast<CACHE*>(lower_level)->current_assoc = LLC_WAY - total_assoc;

    //cout << total_assoc << " " << current_assoc << " " << data[cpu].get_assoc() << endl;
    return metadata_in;
}

uint64_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint64_t metadata_in)
{
	bo_l2c_prefetcher_cache_fill(addr, set, way, prefetch, evicted_addr, this, 0);
    if(prefetch) {
        uint64_t next_addr;
        bool next_addr_exists = data[cpu].on_chip_data.get_next_addr(metadata_in, next_addr, 0, true);
    }
    return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats() {
	bo_l2c_prefetcher_final_stats();
 //   cpu = 0;
    cout << "CPU " << cpu << " TRIAGE Stats:" << endl;

    data[cpu].print_stats();

    std::map<uint64_t, uint64_t> total_pref_count;
    std::map<uint64_t, uint64_t> actual_pref_count;
    for (std::map<uint64_t, uint64_t>::iterator it = total_usage_count.begin(); it!=total_usage_count.end(); ++it) {
        total_pref_count[it->second]++;
    }
    for (std::map<uint64_t, uint64_t>::iterator it = actual_usage_count.begin(); it!=actual_usage_count.end(); ++it) {
        actual_pref_count[it->second]++;
    }

    cout << "Unique Addr Size: " << unique_addr.size() << endl;
//    cout << "Total Pref Count: " << endl;
//    for (unsigned i = 0; i < 100000; ++i) {
//        cout << i << ' ' <<  total_pref_count[i] << ' ' << actual_pref_count[i] << endl;
//    }

    cout << "RAH Estimation Result: " << endl;
    for (int core = 0; core < NUM_CPUS; ++core) {
        for (int config = 0; config < RAH_CONFIG_COUNT; ++config) {
            cout << "RAH Core " << core << " Config " << config << " Traffic: " << rah.get_traffic(core, config) << endl;
            cout << "RAH Core " << core << " Config " << config << " Hits: " << rah.get_hits(core, config) << endl;
            cout << "RAH Core " << core << " Config " << config << " Accesses: " << rah.get_accesses(core, config) << endl;
        }
    }
    rah.print_stats();
}

void CACHE::complete_metadata_req(uint64_t meta_data_addr)
{
}


